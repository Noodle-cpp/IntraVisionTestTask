/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/Brands": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all brands */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["BrandResponse"][];
                        "application/json": components["schemas"]["BrandResponse"][];
                        "text/json": components["schemas"]["BrandResponse"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get cart */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CartListResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Sodas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all sodas */
        get: {
            parameters: {
                query?: {
                    BrandId?: string;
                    MinPrice?: number;
                    MaxPrice?: number;
                    page?: number;
                    perPage?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PaginationResponseOfSodaResponse"];
                        "application/json": components["schemas"]["PaginationResponseOfSodaResponse"];
                        "text/json": components["schemas"]["PaginationResponseOfSodaResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Sodas/price/range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get price range for sodas */
        get: {
            parameters: {
                query?: {
                    brandId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PriceRangeResponse"];
                        "application/json": components["schemas"]["PriceRangeResponse"];
                        "text/json": components["schemas"]["PriceRangeResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{sodaId}/img": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get soda image */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sodaId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileStreamResult"];
                        "application/json": components["schemas"]["FileStreamResult"];
                        "text/json": components["schemas"]["FileStreamResult"];
                    };
                };
                404: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BrandResponse: {
            /** Format: uuid */
            id: string;
            name: string;
        };
        SodaResponse: {
            /** Format: uuid */
            id: string;
            name: string;
            /** Format: int32 */
            price: number;
            /** Format: int32 */
            count: number;
            /** Format: uuid */
            brandId: string;
            brand: components["schemas"]["BrandResponse"];
        };
        CartResponse: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            sodaId: string;
            soda: components["schemas"]["SodaResponse"];
            /** Format: int32 */
            price: number;
            /** Format: int32 */
            count: number;
            /** Format: uuid */
            brandId: string;
            brand: components["schemas"]["BrandResponse"];
            /** Format: date-time */
            createdAt: string;
            sodaName: string;
            brandName: string;
        };
        CartListResponse: {
            carts: components["schemas"]["CartResponse"][];
            /** Format: int32 */
            count: number;
        };
        PaginationResponseOfSodaResponse: {
            list: components["schemas"]["SodaResponse"][];
            /** Format: int32 */
            totalCount: number;
            /** Format: int32 */
            totalPages: number;
        };
        PriceRangeResponse: {
            /** Format: int32 */
            minPrice: number;
            /** Format: int32 */
            maxPrice: number;
        };
        Stream: string;
        StringSegment: {
            buffer?: string | null;
            /** Format: int32 */
            offset?: number;
            /** Format: int32 */
            length?: number;
            value?: string | null;
            hasValue?: boolean;
        };
        EntityTagHeaderValue: {
            tag?: components["schemas"]["StringSegment"];
            isWeak?: boolean;
        } | null;
        FileStreamResult: {
            fileStream?: components["schemas"]["Stream"];
            contentType?: string | null;
            fileDownloadName?: string | null;
            /** Format: date-time */
            lastModified?: string | null;
            entityTag?: components["schemas"]["EntityTagHeaderValue"];
            enableRangeProcessing?: boolean;
        };
        Error: {
            message: string;
            code: string;
        };
    };
    responses: {
        /** @description Resource not found */
        ErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
                "text/plain": components["schemas"]["Error"];
                "text/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
